import axios from 'axios';
import type { NextPage } from 'next';
import Head from 'next/head';
import React, { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';
import { dehydrate, QueryClient, useQuery } from 'react-query';
import { getCardData, getExploreData } from '../api/data';
import Banner from '../components/Banner';
import Footer from '../components/Footer';
import Header from '../components/Header';
import LargeCard from '../components/LargeCard';
import MediumCard from '../components/MediumCard';
import SmallCard from '../components/SmallCard';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/outline';

const Home: NextPage = () => {
  //? 변경되지 않는 메뉴 이미지라 SSR 이후에 호출 할 필요가 없다.
  const { data: exploreData } = useQuery('explore', getExploreData, { enabled: false });
  const { data: cardsData } = useQuery('cards', getCardData, { enabled: false });

  //* Live Anywhere 스크롤 관련
  const [scrollLeft, setScrollLeft] = useState(0);
  const [offsetWidth, setOffsetWidth] = useState(0);
  const [scrollWidth, setScrollWidth] = useState(0);
  const menuScrollRef: MutableRefObject<HTMLDivElement | null> = useRef(null);

  useEffect(() => {
    if (menuScrollRef.current) {
      setOffsetWidth(menuScrollRef.current.offsetWidth);
      setScrollWidth(menuScrollRef.current.scrollWidth);
    }
  }, []);

  const handleLeftScroll = useCallback(() => {
    if (menuScrollRef.current) {
      menuScrollRef.current.scrollTo({ left: scrollLeft - 300, behavior: 'smooth' });

      if (scrollLeft - 300 >= 0) {
        setScrollLeft(scrollLeft - 300);
      } else {
        setScrollLeft(0);
      }
    }
  }, [scrollLeft]);

  const handleRightScroll = useCallback(() => {
    if (menuScrollRef.current) {
      menuScrollRef.current.scrollTo({ left: scrollLeft + 300, behavior: 'smooth' });

      if (offsetWidth + scrollLeft + 300 >= scrollWidth) {
        setScrollLeft(scrollWidth - offsetWidth);
      } else {
        setScrollLeft(scrollLeft + 300);
      }
    }
  }, [scrollLeft, offsetWidth, scrollWidth]);

  return (
    <div>
      <Head>
        <title>Airbnd</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Header */}
      <Header />
      {/* Banner */}
      <Banner />

      <main className="px-8 mx-auto max-w-7xl sm:px-16">
        <section className="pt-6">
          <h2 className="pb-5 text-4xl font-semibold">Explore Nearby</h2>

          {/* Pull some data from a server - API endpoints */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            {exploreData?.map(({ distance, img, location }) => (
              <SmallCard key={img} distance={distance} img={img} location={location} />
            ))}
          </div>
        </section>

        <section>
          <h2 className="py-8 text-4xl font-semibold">Live Anywhere</h2>
          <div className="relative">
            <div
              ref={menuScrollRef}
              className="flex p-3 -ml-3 space-x-3 overflow-x-auto scrollbar-hide"
            >
              {cardsData?.map(({ img, title }) => (
                <MediumCard key={img} img={img} title={title} />
              ))}
            </div>

            <button onClick={handleLeftScroll} className="absolute left-0 text-white top-[160px]">
              <ChevronLeftIcon className="p-2 text-white h-14 hover:bg-black hover:rounded-full hover:bg-opacity-50" />
            </button>
            <button
              onClick={handleRightScroll}
              className="absolute right-0  text-white top-[160px]"
            >
              <ChevronRightIcon className="p-2 text-white h-14 hover:bg-black hover:rounded-full hover:bg-opacity-50" />
            </button>
          </div>
        </section>

        <LargeCard
          img="https://links.papareact.com/4cj"
          title="The Greatest Outdoors"
          description="Wishlists curated by Airbnb."
          buttonText="Get Inspired"
        />
      </main>

      <Footer />
    </div>
  );
};

export async function getStaticProps() {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery('explore', getExploreData);
  await queryClient.prefetchQuery('cards', getCardData);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
}

export default Home;
